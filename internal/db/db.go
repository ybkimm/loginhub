// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createClientStmt, err = db.PrepareContext(ctx, createClient); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClient: %w", err)
	}
	if q.createPasswordStmt, err = db.PrepareContext(ctx, createPassword); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePassword: %w", err)
	}
	if q.createPictureStmt, err = db.PrepareContext(ctx, createPicture); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePicture: %w", err)
	}
	if q.createTokenStmt, err = db.PrepareContext(ctx, createToken); err != nil {
		return nil, fmt.Errorf("error preparing query CreateToken: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteClientStmt, err = db.PrepareContext(ctx, deleteClient); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClient: %w", err)
	}
	if q.deletePictureStmt, err = db.PrepareContext(ctx, deletePicture); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePicture: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getClientStmt, err = db.PrepareContext(ctx, getClient); err != nil {
		return nil, fmt.Errorf("error preparing query GetClient: %w", err)
	}
	if q.getPasswordByUserIDStmt, err = db.PrepareContext(ctx, getPasswordByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPasswordByUserID: %w", err)
	}
	if q.getPictureStmt, err = db.PrepareContext(ctx, getPicture); err != nil {
		return nil, fmt.Errorf("error preparing query GetPicture: %w", err)
	}
	if q.getTokenStmt, err = db.PrepareContext(ctx, getToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetToken: %w", err)
	}
	if q.getTokenByUserIDStmt, err = db.PrepareContext(ctx, getTokenByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTokenByUserID: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.listClientAllStmt, err = db.PrepareContext(ctx, listClientAll); err != nil {
		return nil, fmt.Errorf("error preparing query ListClientAll: %w", err)
	}
	if q.listClientByUserIDStmt, err = db.PrepareContext(ctx, listClientByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query ListClientByUserID: %w", err)
	}
	if q.listPicturesStmt, err = db.PrepareContext(ctx, listPictures); err != nil {
		return nil, fmt.Errorf("error preparing query ListPictures: %w", err)
	}
	if q.listTokensByUserIDStmt, err = db.PrepareContext(ctx, listTokensByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query ListTokensByUserID: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.revokeAllTokensByUserIDStmt, err = db.PrepareContext(ctx, revokeAllTokensByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query RevokeAllTokensByUserID: %w", err)
	}
	if q.revokePasswordStmt, err = db.PrepareContext(ctx, revokePassword); err != nil {
		return nil, fmt.Errorf("error preparing query RevokePassword: %w", err)
	}
	if q.revokeTokenStmt, err = db.PrepareContext(ctx, revokeToken); err != nil {
		return nil, fmt.Errorf("error preparing query RevokeToken: %w", err)
	}
	if q.updateClientStmt, err = db.PrepareContext(ctx, updateClient); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClient: %w", err)
	}
	if q.updatePictureStmt, err = db.PrepareContext(ctx, updatePicture); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePicture: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createClientStmt != nil {
		if cerr := q.createClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientStmt: %w", cerr)
		}
	}
	if q.createPasswordStmt != nil {
		if cerr := q.createPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPasswordStmt: %w", cerr)
		}
	}
	if q.createPictureStmt != nil {
		if cerr := q.createPictureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPictureStmt: %w", cerr)
		}
	}
	if q.createTokenStmt != nil {
		if cerr := q.createTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTokenStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteClientStmt != nil {
		if cerr := q.deleteClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClientStmt: %w", cerr)
		}
	}
	if q.deletePictureStmt != nil {
		if cerr := q.deletePictureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePictureStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getClientStmt != nil {
		if cerr := q.getClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientStmt: %w", cerr)
		}
	}
	if q.getPasswordByUserIDStmt != nil {
		if cerr := q.getPasswordByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPasswordByUserIDStmt: %w", cerr)
		}
	}
	if q.getPictureStmt != nil {
		if cerr := q.getPictureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPictureStmt: %w", cerr)
		}
	}
	if q.getTokenStmt != nil {
		if cerr := q.getTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTokenStmt: %w", cerr)
		}
	}
	if q.getTokenByUserIDStmt != nil {
		if cerr := q.getTokenByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTokenByUserIDStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.listClientAllStmt != nil {
		if cerr := q.listClientAllStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientAllStmt: %w", cerr)
		}
	}
	if q.listClientByUserIDStmt != nil {
		if cerr := q.listClientByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientByUserIDStmt: %w", cerr)
		}
	}
	if q.listPicturesStmt != nil {
		if cerr := q.listPicturesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPicturesStmt: %w", cerr)
		}
	}
	if q.listTokensByUserIDStmt != nil {
		if cerr := q.listTokensByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTokensByUserIDStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.revokeAllTokensByUserIDStmt != nil {
		if cerr := q.revokeAllTokensByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing revokeAllTokensByUserIDStmt: %w", cerr)
		}
	}
	if q.revokePasswordStmt != nil {
		if cerr := q.revokePasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing revokePasswordStmt: %w", cerr)
		}
	}
	if q.revokeTokenStmt != nil {
		if cerr := q.revokeTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing revokeTokenStmt: %w", cerr)
		}
	}
	if q.updateClientStmt != nil {
		if cerr := q.updateClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientStmt: %w", cerr)
		}
	}
	if q.updatePictureStmt != nil {
		if cerr := q.updatePictureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePictureStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	createClientStmt            *sql.Stmt
	createPasswordStmt          *sql.Stmt
	createPictureStmt           *sql.Stmt
	createTokenStmt             *sql.Stmt
	createUserStmt              *sql.Stmt
	deleteClientStmt            *sql.Stmt
	deletePictureStmt           *sql.Stmt
	deleteUserStmt              *sql.Stmt
	getClientStmt               *sql.Stmt
	getPasswordByUserIDStmt     *sql.Stmt
	getPictureStmt              *sql.Stmt
	getTokenStmt                *sql.Stmt
	getTokenByUserIDStmt        *sql.Stmt
	getUserStmt                 *sql.Stmt
	getUserByEmailStmt          *sql.Stmt
	listClientAllStmt           *sql.Stmt
	listClientByUserIDStmt      *sql.Stmt
	listPicturesStmt            *sql.Stmt
	listTokensByUserIDStmt      *sql.Stmt
	listUsersStmt               *sql.Stmt
	revokeAllTokensByUserIDStmt *sql.Stmt
	revokePasswordStmt          *sql.Stmt
	revokeTokenStmt             *sql.Stmt
	updateClientStmt            *sql.Stmt
	updatePictureStmt           *sql.Stmt
	updateUserStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		createClientStmt:            q.createClientStmt,
		createPasswordStmt:          q.createPasswordStmt,
		createPictureStmt:           q.createPictureStmt,
		createTokenStmt:             q.createTokenStmt,
		createUserStmt:              q.createUserStmt,
		deleteClientStmt:            q.deleteClientStmt,
		deletePictureStmt:           q.deletePictureStmt,
		deleteUserStmt:              q.deleteUserStmt,
		getClientStmt:               q.getClientStmt,
		getPasswordByUserIDStmt:     q.getPasswordByUserIDStmt,
		getPictureStmt:              q.getPictureStmt,
		getTokenStmt:                q.getTokenStmt,
		getTokenByUserIDStmt:        q.getTokenByUserIDStmt,
		getUserStmt:                 q.getUserStmt,
		getUserByEmailStmt:          q.getUserByEmailStmt,
		listClientAllStmt:           q.listClientAllStmt,
		listClientByUserIDStmt:      q.listClientByUserIDStmt,
		listPicturesStmt:            q.listPicturesStmt,
		listTokensByUserIDStmt:      q.listTokensByUserIDStmt,
		listUsersStmt:               q.listUsersStmt,
		revokeAllTokensByUserIDStmt: q.revokeAllTokensByUserIDStmt,
		revokePasswordStmt:          q.revokePasswordStmt,
		revokeTokenStmt:             q.revokeTokenStmt,
		updateClientStmt:            q.updateClientStmt,
		updatePictureStmt:           q.updatePictureStmt,
		updateUserStmt:              q.updateUserStmt,
	}
}
